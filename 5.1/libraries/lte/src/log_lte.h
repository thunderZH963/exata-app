/* (c) Copyright 2006-2007, by Kozo keikaku Enginnering Inc.
 * All Rights Reserved.
 *
 * This source code is licensed, not sold, and is subject to a written
 * license agreement.  Among other things, no portion of this source
 * code may be copied, transmitted, disclosed, displayed, distributed,
 * translated, used as the basis for a derivative work, or used, in
 * whole or in part, for any program or purpose other than its intended
 * use in compliance with the license agreement as part of the WiMAX
 * Protocol Library on QualNet software.  This source code and certain
 * of the algorithms contained within it are confidential trade secrets
 * of Kozo keikaku engneering,Inc. and may not be used as the basis for
 * any other software, hardware, product or service.
 */
/**
 * @ingroup LteCommon
 * @file    log_lte.h
 * @brief   Declaration of loggin class for lte
 */
#ifndef __LOG_LTE_H__
#define __LOG_LTE_H__

//#include "lte_plib_conf.h"
#include "node.h"
#include "clock.h"
#ifndef OS_Mutex
#include "qualnet_mutex.h"
#endif

#include "lte_common.h"

#include <set>
#include <sstream>

#define ENABLE_FILTERING 1

#define NUM_LTE_STRING_LAYER_TYPE 8
#define LTE_STRING_LAYER_TYPE_PROP "PROP"
#define LTE_STRING_LAYER_TYPE_PHY "PHY"
#define LTE_STRING_LAYER_TYPE_SCHEDULER "SCH"
#define LTE_STRING_LAYER_TYPE_MAC "MAC"
#define LTE_STRING_LAYER_TYPE_RLC "RLC"
#define LTE_STRING_LAYER_TYPE_PDCP "PDCP"
#define LTE_STRING_LAYER_TYPE_RRC "RRC"
#define LTE_STRING_LAYER_TYPE_EPC "EPC"

namespace lte
{
inline
std::string ConvertTimeTypeToString(const clocktype t)
{
    char buf[MAX_STRING_LENGTH];
    TIME_PrintClockInSecond(t, buf);
    std::string retStr(buf);
    return retStr;
}

// Wrapper for thread mutex class.
class ThreadMutex
    : private QNThreadMutex
{
public:
    ThreadMutex() {}
    ~ThreadMutex() {};
    void Lock() { lock(); }
    void Unlock() { unlock(); }
};

// Wrapper for thread locker class.
class ThreadMutexLocker
{
public:
    ThreadMutexLocker(ThreadMutex& mutex)
        : _mutex(mutex)
    {
        _mutex.Lock();
    }
    
    ~ThreadMutexLocker() { _mutex.Unlock(); }

    ThreadMutexLocker& operator=(const ThreadMutexLocker& another)
    {
        // For supressing warning C4512
        ERROR_Assert(FALSE,"ThreadMutexLocker::operator= cannot be called");
        return *this;
    }

private:
    ThreadMutex& _mutex;

    ThreadMutexLocker(const ThreadMutexLocker& other);
};

enum {
    MS_STATS = 0,
    BS_STATS,
    DL_FRM_SND,
    DL_FRM_SND_RB,
    DL_FRM_SND_SC,
    DL_FRM_RCV,
    DL_MAC_PDU_RCV,
    DL_LAYOUT,
    DL_CHRSP,
    DL_EV,
    DL_PREAMBLE_RCV,
    UL_FRM_GRANT,
    UL_FRM_GRANT_RB,
    UL_FRM_GRANT_SC,
    UL_FRM_RCV,
    UL_MAC_PDU_RCV,
    UL_LAYOUT,
    UL_CHRSP,
    UL_EV,
    HO_INFO_RECV_POWER,
    CQI_INTERPOLATE,
    LOG_NUM,
};

#ifdef LTE_LIB_LOG
#ifdef LTE_LIB_VALIDATION_LOG
/**
 * @ingroup LteCommon
 * @brief   Table of connected eNB - UE pair
 */

struct BaseConnectionInfo
{
    int nodeIdEnb;
    char addressEnb[MAX_STRING_LENGTH];
    int nodeIdUe;
    char addressUe[MAX_STRING_LENGTH];
    int nodeIdCn;
    char addressCn[MAX_STRING_LENGTH];
};

struct ValidationPatternProfile
{
    int numEnb;
    int numUE;
    int numConnInfo;
    char validationPatternIdStr[MAX_STRING_LENGTH];
    const BaseConnectionInfo* connectionInfo;
};

struct ConnectionInfo
{
    int nodeId;
    bool isEnb;
    const BaseConnectionInfo* baseConnectionInfo;
};

// 1 eNB - 1 UE
static const BaseConnectionInfo connectionMap_001001[] =
{
        {1, "190.0.1.1", 2, "190.0.1.2", 3, "190.0.3.1"}
};

// 1 eNB - 10 UE
static const BaseConnectionInfo connectionMap_001010[] =
{
        {2, "190.0.1.1", 3,  "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 4,  "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 5,  "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 6,  "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 7,  "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 8,  "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 9,  "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 10, "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 11, "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 12, "190.0.1.2", 1, "190.0.3.1"},
        {2, "190.0.1.1", 13, "190.0.1.2", 1, "190.0.3.1"}
};

// 1 eNB - 50 UE
static const BaseConnectionInfo connectionMap_001050[] =
{
        {2, "190.0.1.1", 3,   "190.0.1.2",  1, "190.0.3.1"},
        {2, "190.0.1.1", 4,   "190.0.1.3",  1, "190.0.3.1"},
        {2, "190.0.1.1", 5,   "190.0.1.4",  1, "190.0.3.1"},
        {2, "190.0.1.1", 6,   "190.0.1.5",  1, "190.0.3.1"},
        {2, "190.0.1.1", 7,   "190.0.1.6",  1, "190.0.3.1"},
        {2, "190.0.1.1", 8,   "190.0.1.7",  1, "190.0.3.1"},
        {2, "190.0.1.1", 9,   "190.0.1.8",  1, "190.0.3.1"},
        {2, "190.0.1.1", 10,  "190.0.1.9",  1, "190.0.3.1"},
        {2, "190.0.1.1", 11,  "190.0.1.10", 1, "190.0.3.1"},
        {2, "190.0.1.1", 12,  "190.0.1.11", 1, "190.0.3.1"},
        {2, "190.0.1.1", 13,  "190.0.1.12", 1, "190.0.3.1"},
        {2, "190.0.1.1", 14,  "190.0.1.13", 1, "190.0.3.1"},
        {2, "190.0.1.1", 15,  "190.0.1.14", 1, "190.0.3.1"},
        {2, "190.0.1.1", 16,  "190.0.1.15", 1, "190.0.3.1"},
        {2, "190.0.1.1", 17,  "190.0.1.16", 1, "190.0.3.1"},
        {2, "190.0.1.1", 18,  "190.0.1.17", 1, "190.0.3.1"},
        {2, "190.0.1.1", 19,  "190.0.1.18", 1, "190.0.3.1"},
        {2, "190.0.1.1", 20,  "190.0.1.19", 1, "190.0.3.1"},
        {2, "190.0.1.1", 21,  "190.0.1.20", 1, "190.0.3.1"},
        {2, "190.0.1.1", 22,  "190.0.1.21", 1, "190.0.3.1"},
        {2, "190.0.1.1", 23,  "190.0.1.22", 1, "190.0.3.1"},
        {2, "190.0.1.1", 24,  "190.0.1.23", 1, "190.0.3.1"},
        {2, "190.0.1.1", 25,  "190.0.1.24", 1, "190.0.3.1"},
        {2, "190.0.1.1", 26,  "190.0.1.25", 1, "190.0.3.1"},
        {2, "190.0.1.1", 27,  "190.0.1.26", 1, "190.0.3.1"},
        {2, "190.0.1.1", 28,  "190.0.1.27", 1, "190.0.3.1"},
        {2, "190.0.1.1", 29,  "190.0.1.28", 1, "190.0.3.1"},
        {2, "190.0.1.1", 30,  "190.0.1.29", 1, "190.0.3.1"},
        {2, "190.0.1.1", 31,  "190.0.1.30", 1, "190.0.3.1"},
        {2, "190.0.1.1", 32,  "190.0.1.31", 1, "190.0.3.1"},
        {2, "190.0.1.1", 33,  "190.0.1.32", 1, "190.0.3.1"},
        {2, "190.0.1.1", 34,  "190.0.1.33", 1, "190.0.3.1"},
        {2, "190.0.1.1", 35,  "190.0.1.34", 1, "190.0.3.1"},
        {2, "190.0.1.1", 36,  "190.0.1.35", 1, "190.0.3.1"},
        {2, "190.0.1.1", 37,  "190.0.1.36", 1, "190.0.3.1"},
        {2, "190.0.1.1", 38,  "190.0.1.37", 1, "190.0.3.1"},
        {2, "190.0.1.1", 39,  "190.0.1.38", 1, "190.0.3.1"},
        {2, "190.0.1.1", 40,  "190.0.1.39", 1, "190.0.3.1"},
        {2, "190.0.1.1", 41,  "190.0.1.40", 1, "190.0.3.1"},
        {2, "190.0.1.1", 42,  "190.0.1.41", 1, "190.0.3.1"},
        {2, "190.0.1.1", 43,  "190.0.1.42", 1, "190.0.3.1"},
        {2, "190.0.1.1", 44,  "190.0.1.43", 1, "190.0.3.1"},
        {2, "190.0.1.1", 45,  "190.0.1.44", 1, "190.0.3.1"},
        {2, "190.0.1.1", 46,  "190.0.1.45", 1, "190.0.3.1"},
        {2, "190.0.1.1", 47,  "190.0.1.46", 1, "190.0.3.1"},
        {2, "190.0.1.1", 48,  "190.0.1.47", 1, "190.0.3.1"},
        {2, "190.0.1.1", 49,  "190.0.1.48", 1, "190.0.3.1"},
        {2, "190.0.1.1", 50,  "190.0.1.49", 1, "190.0.3.1"},
        {2, "190.0.1.1", 51,  "190.0.1.50", 1, "190.0.3.1"},
        {2, "190.0.1.1", 52,  "190.0.1.51", 1, "190.0.3.1"}
};

// 7 eNB - 1 UE
static const BaseConnectionInfo connectionMap_007001[] =
{
        {1, "190.0.1.1", 8,   "190.0.1.8",  15, "190.0.2.8"},
        {2, "190.0.1.2", 9,   "190.0.1.9",  15, "190.0.2.8"},
        {3, "190.0.1.3", 10,  "190.0.1.10", 15, "190.0.2.8"},
        {4, "190.0.1.4", 11,  "190.0.1.11", 15, "190.0.2.8"},
        {5, "190.0.1.5", 12,  "190.0.1.12", 15, "190.0.2.8"},
        {6, "190.0.1.6", 13,  "190.0.1.13", 15, "190.0.2.8"},
        {7, "190.0.1.7", 14,  "190.0.1.14", 15, "190.0.2.8"}
};

// 7 eNB - 10 UE
static const BaseConnectionInfo connectionMap_007010[] =
{
        {1, "190.0.1.1", 8,   "190.0.1.8",  78, "190.0.2.8"},
        {2, "190.0.1.2", 9,   "190.0.1.9",  78, "190.0.2.8"},
        {3, "190.0.1.3", 10,  "190.0.1.10", 78, "190.0.2.8"},
        {4, "190.0.1.4", 11,  "190.0.1.11", 78, "190.0.2.8"},
        {5, "190.0.1.5", 12,  "190.0.1.12", 78, "190.0.2.8"},
        {6, "190.0.1.6", 13,  "190.0.1.13", 78, "190.0.2.8"},
        {7, "190.0.1.7", 14,  "190.0.1.14", 78, "190.0.2.8"},
        {1, "190.0.1.1", 15,  "190.0.1.15", 78, "190.0.2.8"},
        {2, "190.0.1.2", 16,  "190.0.1.16", 78, "190.0.2.8"},
        {3, "190.0.1.3", 17,  "190.0.1.17", 78, "190.0.2.8"},
        {4, "190.0.1.4", 18,  "190.0.1.18", 78, "190.0.2.8"},
        {5, "190.0.1.5", 19,  "190.0.1.19", 78, "190.0.2.8"},
        {6, "190.0.1.6", 20,  "190.0.1.20", 78, "190.0.2.8"},
        {7, "190.0.1.7", 21,  "190.0.1.21", 78, "190.0.2.8"},
        {1, "190.0.1.1", 22,  "190.0.1.22", 78, "190.0.2.8"},
        {2, "190.0.1.2", 23,  "190.0.1.23", 78, "190.0.2.8"},
        {3, "190.0.1.3", 24,  "190.0.1.24", 78, "190.0.2.8"},
        {4, "190.0.1.4", 25,  "190.0.1.25", 78, "190.0.2.8"},
        {5, "190.0.1.5", 26,  "190.0.1.26", 78, "190.0.2.8"},
        {6, "190.0.1.6", 27,  "190.0.1.27", 78, "190.0.2.8"},
        {7, "190.0.1.7", 28,  "190.0.1.28", 78, "190.0.2.8"},
        {1, "190.0.1.1", 29,  "190.0.1.29", 78, "190.0.2.8"},
        {2, "190.0.1.2", 30,  "190.0.1.30", 78, "190.0.2.8"},
        {3, "190.0.1.3", 31,  "190.0.1.31", 78, "190.0.2.8"},
        {4, "190.0.1.4", 32,  "190.0.1.32", 78, "190.0.2.8"},
        {5, "190.0.1.5", 33,  "190.0.1.33", 78, "190.0.2.8"},
        {6, "190.0.1.6", 34,  "190.0.1.34", 78, "190.0.2.8"},
        {7, "190.0.1.7", 35,  "190.0.1.35", 78, "190.0.2.8"},
        {1, "190.0.1.1", 36,  "190.0.1.36", 78, "190.0.2.8"},
        {2, "190.0.1.2", 37,  "190.0.1.37", 78, "190.0.2.8"},
        {3, "190.0.1.3", 38,  "190.0.1.38", 78, "190.0.2.8"},
        {4, "190.0.1.4", 39,  "190.0.1.39", 78, "190.0.2.8"},
        {5, "190.0.1.5", 40,  "190.0.1.40", 78, "190.0.2.8"},
        {6, "190.0.1.6", 41,  "190.0.1.41", 78, "190.0.2.8"},
        {7, "190.0.1.7", 42,  "190.0.1.42", 78, "190.0.2.8"},
        {1, "190.0.1.1", 43,  "190.0.1.43", 78, "190.0.2.8"},
        {2, "190.0.1.2", 44,  "190.0.1.44", 78, "190.0.2.8"},
        {3, "190.0.1.3", 45,  "190.0.1.45", 78, "190.0.2.8"},
        {4, "190.0.1.4", 46,  "190.0.1.46", 78, "190.0.2.8"},
        {5, "190.0.1.5", 47,  "190.0.1.47", 78, "190.0.2.8"},
        {6, "190.0.1.6", 48,  "190.0.1.48", 78, "190.0.2.8"},
        {7, "190.0.1.7", 49,  "190.0.1.49", 78, "190.0.2.8"},
        {1, "190.0.1.1", 50,  "190.0.1.50", 78, "190.0.2.8"},
        {2, "190.0.1.2", 51,  "190.0.1.51", 78, "190.0.2.8"},
        {3, "190.0.1.3", 52,  "190.0.1.52", 78, "190.0.2.8"},
        {4, "190.0.1.4", 53,  "190.0.1.53", 78, "190.0.2.8"},
        {5, "190.0.1.5", 54,  "190.0.1.54", 78, "190.0.2.8"},
        {6, "190.0.1.6", 55,  "190.0.1.55", 78, "190.0.2.8"},
        {7, "190.0.1.7", 56,  "190.0.1.56", 78, "190.0.2.8"},
        {1, "190.0.1.1", 57,  "190.0.1.57", 78, "190.0.2.8"},
        {2, "190.0.1.2", 58,  "190.0.1.58", 78, "190.0.2.8"},
        {3, "190.0.1.3", 59,  "190.0.1.59", 78, "190.0.2.8"},
        {4, "190.0.1.4", 60,  "190.0.1.60", 78, "190.0.2.8"},
        {5, "190.0.1.5", 61,  "190.0.1.61", 78, "190.0.2.8"},
        {6, "190.0.1.6", 62,  "190.0.1.62", 78, "190.0.2.8"},
        {7, "190.0.1.7", 63,  "190.0.1.63", 78, "190.0.2.8"},
        {1, "190.0.1.1", 64,  "190.0.1.64", 78, "190.0.2.8"},
        {2, "190.0.1.2", 65,  "190.0.1.65", 78, "190.0.2.8"},
        {3, "190.0.1.3", 66,  "190.0.1.66", 78, "190.0.2.8"},
        {4, "190.0.1.4", 67,  "190.0.1.67", 78, "190.0.2.8"},
        {5, "190.0.1.5", 68,  "190.0.1.68", 78, "190.0.2.8"},
        {6, "190.0.1.6", 69,  "190.0.1.69", 78, "190.0.2.8"},
        {7, "190.0.1.7", 70,  "190.0.1.70", 78, "190.0.2.8"},
        {1, "190.0.1.1", 71,  "190.0.1.71", 78, "190.0.2.8"},
        {2, "190.0.1.2", 72,  "190.0.1.72", 78, "190.0.2.8"},
        {3, "190.0.1.3", 73,  "190.0.1.73", 78, "190.0.2.8"},
        {4, "190.0.1.4", 74,  "190.0.1.74", 78, "190.0.2.8"},
        {5, "190.0.1.5", 75,  "190.0.1.75", 78, "190.0.2.8"},
        {6, "190.0.1.6", 76,  "190.0.1.76", 78, "190.0.2.8"},
        {7, "190.0.1.7", 77,  "190.0.1.77", 78, "190.0.2.8"}
};

// 7 eNB - 50 UE
static const BaseConnectionInfo connectionMap_007050[] =
{
        {1, "190.3.0.1", 8,   "190.3.0.8",  358, "190.0.2.8"},
        {2, "190.3.0.2", 9,   "190.3.0.9",  358, "190.0.2.8"},
        {3, "190.3.0.3", 10,  "190.3.0.10", 358, "190.0.2.8"},
        {4, "190.3.0.4", 11,  "190.3.0.11", 358, "190.0.2.8"},
        {5, "190.3.0.5", 12,  "190.3.0.12", 358, "190.0.2.8"},
        {6, "190.3.0.6", 13,  "190.3.0.13", 358, "190.0.2.8"},
        {7, "190.3.0.7", 14,  "190.3.0.14", 358, "190.0.2.8"},
        {1, "190.3.0.1", 15,  "190.3.0.15", 358, "190.0.2.8"},
        {2, "190.3.0.2", 16,  "190.3.0.16", 358, "190.0.2.8"},
        {3, "190.3.0.3", 17,  "190.3.0.17", 358, "190.0.2.8"},
        {4, "190.3.0.4", 18,  "190.3.0.18", 358, "190.0.2.8"},
        {5, "190.3.0.5", 19,  "190.3.0.19", 358, "190.0.2.8"},
        {6, "190.3.0.6", 20,  "190.3.0.20", 358, "190.0.2.8"},
        {7, "190.3.0.7", 21,  "190.3.0.21", 358, "190.0.2.8"},
        {1, "190.3.0.1", 22,  "190.3.0.22", 358, "190.0.2.8"},
        {2, "190.3.0.2", 23,  "190.3.0.23", 358, "190.0.2.8"},
        {3, "190.3.0.3", 24,  "190.3.0.24", 358, "190.0.2.8"},
        {4, "190.3.0.4", 25,  "190.3.0.25", 358, "190.0.2.8"},
        {5, "190.3.0.5", 26,  "190.3.0.26", 358, "190.0.2.8"},
        {6, "190.3.0.6", 27,  "190.3.0.27", 358, "190.0.2.8"},
        {7, "190.3.0.7", 28,  "190.3.0.28", 358, "190.0.2.8"},
        {1, "190.3.0.1", 29,  "190.3.0.29", 358, "190.0.2.8"},
        {2, "190.3.0.2", 30,  "190.3.0.30", 358, "190.0.2.8"},
        {3, "190.3.0.3", 31,  "190.3.0.31", 358, "190.0.2.8"},
        {4, "190.3.0.4", 32,  "190.3.0.32", 358, "190.0.2.8"},
        {5, "190.3.0.5", 33,  "190.3.0.33", 358, "190.0.2.8"},
        {6, "190.3.0.6", 34,  "190.3.0.34", 358, "190.0.2.8"},
        {7, "190.3.0.7", 35,  "190.3.0.35", 358, "190.0.2.8"},
        {1, "190.3.0.1", 36,  "190.3.0.36", 358, "190.0.2.8"},
        {2, "190.3.0.2", 37,  "190.3.0.37", 358, "190.0.2.8"},
        {3, "190.3.0.3", 38,  "190.3.0.38", 358, "190.0.2.8"},
        {4, "190.3.0.4", 39,  "190.3.0.39", 358, "190.0.2.8"},
        {5, "190.3.0.5", 40,  "190.3.0.40", 358, "190.0.2.8"},
        {6, "190.3.0.6", 41,  "190.3.0.41", 358, "190.0.2.8"},
        {7, "190.3.0.7", 42,  "190.3.0.42", 358, "190.0.2.8"},
        {1, "190.3.0.1", 43,  "190.3.0.43", 358, "190.0.2.8"},
        {2, "190.3.0.2", 44,  "190.3.0.44", 358, "190.0.2.8"},
        {3, "190.3.0.3", 45,  "190.3.0.45", 358, "190.0.2.8"},
        {4, "190.3.0.4", 46,  "190.3.0.46", 358, "190.0.2.8"},
        {5, "190.3.0.5", 47,  "190.3.0.47", 358, "190.0.2.8"},
        {6, "190.3.0.6", 48,  "190.3.0.48", 358, "190.0.2.8"},
        {7, "190.3.0.7", 49,  "190.3.0.49", 358, "190.0.2.8"},
        {1, "190.3.0.1", 50,  "190.3.0.50", 358, "190.0.2.8"},
        {2, "190.3.0.2", 51,  "190.3.0.51", 358, "190.0.2.8"},
        {3, "190.3.0.3", 52,  "190.3.0.52", 358, "190.0.2.8"},
        {4, "190.3.0.4", 53,  "190.3.0.53", 358, "190.0.2.8"},
        {5, "190.3.0.5", 54,  "190.3.0.54", 358, "190.0.2.8"},
        {6, "190.3.0.6", 55,  "190.3.0.55", 358, "190.0.2.8"},
        {7, "190.3.0.7", 56,  "190.3.0.56", 358, "190.0.2.8"},
        {1, "190.3.0.1", 57,  "190.3.0.57", 358, "190.0.2.8"},
        {2, "190.3.0.2", 58,  "190.3.0.58", 358, "190.0.2.8"},
        {3, "190.3.0.3", 59,  "190.3.0.59", 358, "190.0.2.8"},
        {4, "190.3.0.4", 60,  "190.3.0.60", 358, "190.0.2.8"},
        {5, "190.3.0.5", 61,  "190.3.0.61", 358, "190.0.2.8"},
        {6, "190.3.0.6", 62,  "190.3.0.62", 358, "190.0.2.8"},
        {7, "190.3.0.7", 63,  "190.3.0.63", 358, "190.0.2.8"},
        {1, "190.3.0.1", 64,  "190.3.0.64", 358, "190.0.2.8"},
        {2, "190.3.0.2", 65,  "190.3.0.65", 358, "190.0.2.8"},
        {3, "190.3.0.3", 66,  "190.3.0.66", 358, "190.0.2.8"},
        {4, "190.3.0.4", 67,  "190.3.0.67", 358, "190.0.2.8"},
        {5, "190.3.0.5", 68,  "190.3.0.68", 358, "190.0.2.8"},
        {6, "190.3.0.6", 69,  "190.3.0.69", 358, "190.0.2.8"},
        {7, "190.3.0.7", 70,  "190.3.0.70", 358, "190.0.2.8"},
        {1, "190.3.0.1", 71,  "190.3.0.71", 358, "190.0.2.8"},
        {2, "190.3.0.2", 72,  "190.3.0.72", 358, "190.0.2.8"},
        {3, "190.3.0.3", 73,  "190.3.0.73", 358, "190.0.2.8"},
        {4, "190.3.0.4", 74,  "190.3.0.74", 358, "190.0.2.8"},
        {5, "190.3.0.5", 75,  "190.3.0.75", 358, "190.0.2.8"},
        {6, "190.3.0.6", 76,  "190.3.0.76", 358, "190.0.2.8"},
        {7, "190.3.0.7", 77,  "190.3.0.77", 358, "190.0.2.8"},
        {1, "190.3.0.1", 78,  "190.3.0.78", 358, "190.0.2.8"},
        {2, "190.3.0.2", 79,  "190.3.0.79", 358, "190.0.2.8"},
        {3, "190.3.0.3", 80,  "190.3.0.80", 358, "190.0.2.8"},
        {4, "190.3.0.4", 81,  "190.3.0.81", 358, "190.0.2.8"},
        {5, "190.3.0.5", 82,  "190.3.0.82", 358, "190.0.2.8"},
        {6, "190.3.0.6", 83,  "190.3.0.83", 358, "190.0.2.8"},
        {7, "190.3.0.7", 84,  "190.3.0.84", 358, "190.0.2.8"},
        {1, "190.3.0.1", 85,  "190.3.0.85", 358, "190.0.2.8"},
        {2, "190.3.0.2", 86,  "190.3.0.86", 358, "190.0.2.8"},
        {3, "190.3.0.3", 87,  "190.3.0.87", 358, "190.0.2.8"},
        {4, "190.3.0.4", 88,  "190.3.0.88", 358, "190.0.2.8"},
        {5, "190.3.0.5", 89,  "190.3.0.89", 358, "190.0.2.8"},
        {6, "190.3.0.6", 90,  "190.3.0.90", 358, "190.0.2.8"},
        {7, "190.3.0.7", 91,  "190.3.0.91", 358, "190.0.2.8"},
        {1, "190.3.0.1", 92,  "190.3.0.92", 358, "190.0.2.8"},
        {2, "190.3.0.2", 93,  "190.3.0.93", 358, "190.0.2.8"},
        {3, "190.3.0.3", 94,  "190.3.0.94", 358, "190.0.2.8"},
        {4, "190.3.0.4", 95,  "190.3.0.95", 358, "190.0.2.8"},
        {5, "190.3.0.5", 96,  "190.3.0.96", 358, "190.0.2.8"},
        {6, "190.3.0.6", 97,  "190.3.0.97", 358, "190.0.2.8"},
        {7, "190.3.0.7", 98,  "190.3.0.98", 358, "190.0.2.8"},
        {1, "190.3.0.1", 99,  "190.3.0.99", 358, "190.0.2.8"},
        {2, "190.3.0.2", 100,  "190.3.0.100", 358, "190.0.2.8"},
        {3, "190.3.0.3", 101,  "190.3.0.101", 358, "190.0.2.8"},
        {4, "190.3.0.4", 102,  "190.3.0.102", 358, "190.0.2.8"},
        {5, "190.3.0.5", 103,  "190.3.0.103", 358, "190.0.2.8"},
        {6, "190.3.0.6", 104,  "190.3.0.104", 358, "190.0.2.8"},
        {7, "190.3.0.7", 105,  "190.3.0.105", 358, "190.0.2.8"},
        {1, "190.3.0.1", 106,  "190.3.0.106", 358, "190.0.2.8"},
        {2, "190.3.0.2", 107,  "190.3.0.107", 358, "190.0.2.8"},
        {3, "190.3.0.3", 108,  "190.3.0.108", 358, "190.0.2.8"},
        {4, "190.3.0.4", 109,  "190.3.0.109", 358, "190.0.2.8"},
        {5, "190.3.0.5", 110,  "190.3.0.110", 358, "190.0.2.8"},
        {6, "190.3.0.6", 111,  "190.3.0.111", 358, "190.0.2.8"},
        {7, "190.3.0.7", 112,  "190.3.0.112", 358, "190.0.2.8"},
        {1, "190.3.0.1", 113,  "190.3.0.113", 358, "190.0.2.8"},
        {2, "190.3.0.2", 114,  "190.3.0.114", 358, "190.0.2.8"},
        {3, "190.3.0.3", 115,  "190.3.0.115", 358, "190.0.2.8"},
        {4, "190.3.0.4", 116,  "190.3.0.116", 358, "190.0.2.8"},
        {5, "190.3.0.5", 117,  "190.3.0.117", 358, "190.0.2.8"},
        {6, "190.3.0.6", 118,  "190.3.0.118", 358, "190.0.2.8"},
        {7, "190.3.0.7", 119,  "190.3.0.119", 358, "190.0.2.8"},
        {1, "190.3.0.1", 120,  "190.3.0.120", 358, "190.0.2.8"},
        {2, "190.3.0.2", 121,  "190.3.0.121", 358, "190.0.2.8"},
        {3, "190.3.0.3", 122,  "190.3.0.122", 358, "190.0.2.8"},
        {4, "190.3.0.4", 123,  "190.3.0.123", 358, "190.0.2.8"},
        {5, "190.3.0.5", 124,  "190.3.0.124", 358, "190.0.2.8"},
        {6, "190.3.0.6", 125,  "190.3.0.125", 358, "190.0.2.8"},
        {7, "190.3.0.7", 126,  "190.3.0.126", 358, "190.0.2.8"},
        {1, "190.3.0.1", 127,  "190.3.0.127", 358, "190.0.2.8"},
        {2, "190.3.0.2", 128,  "190.3.0.128", 358, "190.0.2.8"},
        {3, "190.3.0.3", 129,  "190.3.0.129", 358, "190.0.2.8"},
        {4, "190.3.0.4", 130,  "190.3.0.130", 358, "190.0.2.8"},
        {5, "190.3.0.5", 131,  "190.3.0.131", 358, "190.0.2.8"},
        {6, "190.3.0.6", 132,  "190.3.0.132", 358, "190.0.2.8"},
        {7, "190.3.0.7", 133,  "190.3.0.133", 358, "190.0.2.8"},
        {1, "190.3.0.1", 134,  "190.3.0.134", 358, "190.0.2.8"},
        {2, "190.3.0.2", 135,  "190.3.0.135", 358, "190.0.2.8"},
        {3, "190.3.0.3", 136,  "190.3.0.136", 358, "190.0.2.8"},
        {4, "190.3.0.4", 137,  "190.3.0.137", 358, "190.0.2.8"},
        {5, "190.3.0.5", 138,  "190.3.0.138", 358, "190.0.2.8"},
        {6, "190.3.0.6", 139,  "190.3.0.139", 358, "190.0.2.8"},
        {7, "190.3.0.7", 140,  "190.3.0.140", 358, "190.0.2.8"},
        {1, "190.3.0.1", 141,  "190.3.0.141", 358, "190.0.2.8"},
        {2, "190.3.0.2", 142,  "190.3.0.142", 358, "190.0.2.8"},
        {3, "190.3.0.3", 143,  "190.3.0.143", 358, "190.0.2.8"},
        {4, "190.3.0.4", 144,  "190.3.0.144", 358, "190.0.2.8"},
        {5, "190.3.0.5", 145,  "190.3.0.145", 358, "190.0.2.8"},
        {6, "190.3.0.6", 146,  "190.3.0.146", 358, "190.0.2.8"},
        {7, "190.3.0.7", 147,  "190.3.0.147", 358, "190.0.2.8"},
        {1, "190.3.0.1", 148,  "190.3.0.148", 358, "190.0.2.8"},
        {2, "190.3.0.2", 149,  "190.3.0.149", 358, "190.0.2.8"},
        {3, "190.3.0.3", 150,  "190.3.0.150", 358, "190.0.2.8"},
        {4, "190.3.0.4", 151,  "190.3.0.151", 358, "190.0.2.8"},
        {5, "190.3.0.5", 152,  "190.3.0.152", 358, "190.0.2.8"},
        {6, "190.3.0.6", 153,  "190.3.0.153", 358, "190.0.2.8"},
        {7, "190.3.0.7", 154,  "190.3.0.154", 358, "190.0.2.8"},
        {1, "190.3.0.1", 155,  "190.3.0.155", 358, "190.0.2.8"},
        {2, "190.3.0.2", 156,  "190.3.0.156", 358, "190.0.2.8"},
        {3, "190.3.0.3", 157,  "190.3.0.157", 358, "190.0.2.8"},
        {4, "190.3.0.4", 158,  "190.3.0.158", 358, "190.0.2.8"},
        {5, "190.3.0.5", 159,  "190.3.0.159", 358, "190.0.2.8"},
        {6, "190.3.0.6", 160,  "190.3.0.160", 358, "190.0.2.8"},
        {7, "190.3.0.7", 161,  "190.3.0.161", 358, "190.0.2.8"},
        {1, "190.3.0.1", 162,  "190.3.0.162", 358, "190.0.2.8"},
        {2, "190.3.0.2", 163,  "190.3.0.163", 358, "190.0.2.8"},
        {3, "190.3.0.3", 164,  "190.3.0.164", 358, "190.0.2.8"},
        {4, "190.3.0.4", 165,  "190.3.0.165", 358, "190.0.2.8"},
        {5, "190.3.0.5", 166,  "190.3.0.166", 358, "190.0.2.8"},
        {6, "190.3.0.6", 167,  "190.3.0.167", 358, "190.0.2.8"},
        {7, "190.3.0.7", 168,  "190.3.0.168", 358, "190.0.2.8"},
        {1, "190.3.0.1", 169,  "190.3.0.169", 358, "190.0.2.8"},
        {2, "190.3.0.2", 170,  "190.3.0.170", 358, "190.0.2.8"},
        {3, "190.3.0.3", 171,  "190.3.0.171", 358, "190.0.2.8"},
        {4, "190.3.0.4", 172,  "190.3.0.172", 358, "190.0.2.8"},
        {5, "190.3.0.5", 173,  "190.3.0.173", 358, "190.0.2.8"},
        {6, "190.3.0.6", 174,  "190.3.0.174", 358, "190.0.2.8"},
        {7, "190.3.0.7", 175,  "190.3.0.175", 358, "190.0.2.8"},
        {1, "190.3.0.1", 176,  "190.3.0.176", 358, "190.0.2.8"},
        {2, "190.3.0.2", 177,  "190.3.0.177", 358, "190.0.2.8"},
        {3, "190.3.0.3", 178,  "190.3.0.178", 358, "190.0.2.8"},
        {4, "190.3.0.4", 179,  "190.3.0.179", 358, "190.0.2.8"},
        {5, "190.3.0.5", 180,  "190.3.0.180", 358, "190.0.2.8"},
        {6, "190.3.0.6", 181,  "190.3.0.181", 358, "190.0.2.8"},
        {7, "190.3.0.7", 182,  "190.3.0.182", 358, "190.0.2.8"},
        {1, "190.3.0.1", 183,  "190.3.0.183", 358, "190.0.2.8"},
        {2, "190.3.0.2", 184,  "190.3.0.184", 358, "190.0.2.8"},
        {3, "190.3.0.3", 185,  "190.3.0.185", 358, "190.0.2.8"},
        {4, "190.3.0.4", 186,  "190.3.0.186", 358, "190.0.2.8"},
        {5, "190.3.0.5", 187,  "190.3.0.187", 358, "190.0.2.8"},
        {6, "190.3.0.6", 188,  "190.3.0.188", 358, "190.0.2.8"},
        {7, "190.3.0.7", 189,  "190.3.0.189", 358, "190.0.2.8"},
        {1, "190.3.0.1", 190,  "190.3.0.190", 358, "190.0.2.8"},
        {2, "190.3.0.2", 191,  "190.3.0.191", 358, "190.0.2.8"},
        {3, "190.3.0.3", 192,  "190.3.0.192", 358, "190.0.2.8"},
        {4, "190.3.0.4", 193,  "190.3.0.193", 358, "190.0.2.8"},
        {5, "190.3.0.5", 194,  "190.3.0.194", 358, "190.0.2.8"},
        {6, "190.3.0.6", 195,  "190.3.0.195", 358, "190.0.2.8"},
        {7, "190.3.0.7", 196,  "190.3.0.196", 358, "190.0.2.8"},
        {1, "190.3.0.1", 197,  "190.3.0.197", 358, "190.0.2.8"},
        {2, "190.3.0.2", 198,  "190.3.0.198", 358, "190.0.2.8"},
        {3, "190.3.0.3", 199,  "190.3.0.199", 358, "190.0.2.8"},
        {4, "190.3.0.4", 200,  "190.3.0.200", 358, "190.0.2.8"},
        {5, "190.3.0.5", 201,  "190.3.0.201", 358, "190.0.2.8"},
        {6, "190.3.0.6", 202,  "190.3.0.202", 358, "190.0.2.8"},
        {7, "190.3.0.7", 203,  "190.3.0.203", 358, "190.0.2.8"},
        {1, "190.3.0.1", 204,  "190.3.0.204", 358, "190.0.2.8"},
        {2, "190.3.0.2", 205,  "190.3.0.205", 358, "190.0.2.8"},
        {3, "190.3.0.3", 206,  "190.3.0.206", 358, "190.0.2.8"},
        {4, "190.3.0.4", 207,  "190.3.0.207", 358, "190.0.2.8"},
        {5, "190.3.0.5", 208,  "190.3.0.208", 358, "190.0.2.8"},
        {6, "190.3.0.6", 209,  "190.3.0.209", 358, "190.0.2.8"},
        {7, "190.3.0.7", 210,  "190.3.0.210", 358, "190.0.2.8"},
        {1, "190.3.0.1", 211,  "190.3.0.211", 358, "190.0.2.8"},
        {2, "190.3.0.2", 212,  "190.3.0.212", 358, "190.0.2.8"},
        {3, "190.3.0.3", 213,  "190.3.0.213", 358, "190.0.2.8"},
        {4, "190.3.0.4", 214,  "190.3.0.214", 358, "190.0.2.8"},
        {5, "190.3.0.5", 215,  "190.3.0.215", 358, "190.0.2.8"},
        {6, "190.3.0.6", 216,  "190.3.0.216", 358, "190.0.2.8"},
        {7, "190.3.0.7", 217,  "190.3.0.217", 358, "190.0.2.8"},
        {1, "190.3.0.1", 218,  "190.3.0.218", 358, "190.0.2.8"},
        {2, "190.3.0.2", 219,  "190.3.0.219", 358, "190.0.2.8"},
        {3, "190.3.0.3", 220,  "190.3.0.220", 358, "190.0.2.8"},
        {4, "190.3.0.4", 221,  "190.3.0.221", 358, "190.0.2.8"},
        {5, "190.3.0.5", 222,  "190.3.0.222", 358, "190.0.2.8"},
        {6, "190.3.0.6", 223,  "190.3.0.223", 358, "190.0.2.8"},
        {7, "190.3.0.7", 224,  "190.3.0.224", 358, "190.0.2.8"},
        {1, "190.3.0.1", 225,  "190.3.0.225", 358, "190.0.2.8"},
        {2, "190.3.0.2", 226,  "190.3.0.226", 358, "190.0.2.8"},
        {3, "190.3.0.3", 227,  "190.3.0.227", 358, "190.0.2.8"},
        {4, "190.3.0.4", 228,  "190.3.0.228", 358, "190.0.2.8"},
        {5, "190.3.0.5", 229,  "190.3.0.229", 358, "190.0.2.8"},
        {6, "190.3.0.6", 230,  "190.3.0.230", 358, "190.0.2.8"},
        {7, "190.3.0.7", 231,  "190.3.0.231", 358, "190.0.2.8"},
        {1, "190.3.0.1", 232,  "190.3.0.232", 358, "190.0.2.8"},
        {2, "190.3.0.2", 233,  "190.3.0.233", 358, "190.0.2.8"},
        {3, "190.3.0.3", 234,  "190.3.0.234", 358, "190.0.2.8"},
        {4, "190.3.0.4", 235,  "190.3.0.235", 358, "190.0.2.8"},
        {5, "190.3.0.5", 236,  "190.3.0.236", 358, "190.0.2.8"},
        {6, "190.3.0.6", 237,  "190.3.0.237", 358, "190.0.2.8"},
        {7, "190.3.0.7", 238,  "190.3.0.238", 358, "190.0.2.8"},
        {1, "190.3.0.1", 239,  "190.3.0.239", 358, "190.0.2.8"},
        {2, "190.3.0.2", 240,  "190.3.0.240", 358, "190.0.2.8"},
        {3, "190.3.0.3", 241,  "190.3.0.241", 358, "190.0.2.8"},
        {4, "190.3.0.4", 242,  "190.3.0.242", 358, "190.0.2.8"},
        {5, "190.3.0.5", 243,  "190.3.0.243", 358, "190.0.2.8"},
        {6, "190.3.0.6", 244,  "190.3.0.244", 358, "190.0.2.8"},
        {7, "190.3.0.7", 245,  "190.3.0.245", 358, "190.0.2.8"},
        {1, "190.3.0.1", 246,  "190.3.0.246", 358, "190.0.2.8"},
        {2, "190.3.0.2", 247,  "190.3.0.247", 358, "190.0.2.8"},
        {3, "190.3.0.3", 248,  "190.3.0.248", 358, "190.0.2.8"},
        {4, "190.3.0.4", 249,  "190.3.0.249", 358, "190.0.2.8"},
        {5, "190.3.0.5", 250,  "190.3.0.250", 358, "190.0.2.8"},
        {6, "190.3.0.6", 251,  "190.3.0.251", 358, "190.0.2.8"},
        {7, "190.3.0.7", 252,  "190.3.0.252", 358, "190.0.2.8"},
        {1, "190.3.0.1", 253,  "190.3.0.253", 358, "190.0.2.8"},
        {2, "190.3.0.2", 254,  "190.3.0.254", 358, "190.0.2.8"},
        {3, "190.3.0.3", 255,  "190.3.1.1",  358, "190.0.2.8"},
        {4, "190.3.0.4", 256,  "190.3.1.2",  358, "190.0.2.8"},
        {5, "190.3.0.5", 257,  "190.3.1.3",  358, "190.0.2.8"},
        {6, "190.3.0.6", 258,  "190.3.1.4",  358, "190.0.2.8"},
        {7, "190.3.0.7", 259,  "190.3.1.5",  358, "190.0.2.8"},
        {1, "190.3.0.1", 260,  "190.3.1.6",  358, "190.0.2.8"},
        {2, "190.3.0.2", 261,  "190.3.1.7",  358, "190.0.2.8"},
        {3, "190.3.0.3", 262,  "190.3.1.8",  358, "190.0.2.8"},
        {4, "190.3.0.4", 263,  "190.3.1.9",  358, "190.0.2.8"},
        {5, "190.3.0.5", 264,  "190.3.1.10", 358, "190.0.2.8"},
        {6, "190.3.0.6", 265,  "190.3.1.11", 358, "190.0.2.8"},
        {7, "190.3.0.7", 266,  "190.3.1.12", 358, "190.0.2.8"},
        {1, "190.3.0.1", 267,  "190.3.1.13", 358, "190.0.2.8"},
        {2, "190.3.0.2", 268,  "190.3.1.14", 358, "190.0.2.8"},
        {3, "190.3.0.3", 269,  "190.3.1.15", 358, "190.0.2.8"},
        {4, "190.3.0.4", 270,  "190.3.1.16", 358, "190.0.2.8"},
        {5, "190.3.0.5", 271,  "190.3.1.17", 358, "190.0.2.8"},
        {6, "190.3.0.6", 272,  "190.3.1.18", 358, "190.0.2.8"},
        {7, "190.3.0.7", 273,  "190.3.1.19", 358, "190.0.2.8"},
        {1, "190.3.0.1", 274,  "190.3.1.20", 358, "190.0.2.8"},
        {2, "190.3.0.2", 275,  "190.3.1.21", 358, "190.0.2.8"},
        {3, "190.3.0.3", 276,  "190.3.1.22", 358, "190.0.2.8"},
        {4, "190.3.0.4", 277,  "190.3.1.23", 358, "190.0.2.8"},
        {5, "190.3.0.5", 278,  "190.3.1.24", 358, "190.0.2.8"},
        {6, "190.3.0.6", 279,  "190.3.1.25", 358, "190.0.2.8"},
        {7, "190.3.0.7", 280,  "190.3.1.26", 358, "190.0.2.8"},
        {1, "190.3.0.1", 281,  "190.3.1.27", 358, "190.0.2.8"},
        {2, "190.3.0.2", 282,  "190.3.1.28", 358, "190.0.2.8"},
        {3, "190.3.0.3", 283,  "190.3.1.29", 358, "190.0.2.8"},
        {4, "190.3.0.4", 284,  "190.3.1.30", 358, "190.0.2.8"},
        {5, "190.3.0.5", 285,  "190.3.1.31", 358, "190.0.2.8"},
        {6, "190.3.0.6", 286,  "190.3.1.32", 358, "190.0.2.8"},
        {7, "190.3.0.7", 287,  "190.3.1.33", 358, "190.0.2.8"},
        {1, "190.3.0.1", 288,  "190.3.1.34", 358, "190.0.2.8"},
        {2, "190.3.0.2", 289,  "190.3.1.35", 358, "190.0.2.8"},
        {3, "190.3.0.3", 290,  "190.3.1.36", 358, "190.0.2.8"},
        {4, "190.3.0.4", 291,  "190.3.1.37", 358, "190.0.2.8"},
        {5, "190.3.0.5", 292,  "190.3.1.38", 358, "190.0.2.8"},
        {6, "190.3.0.6", 293,  "190.3.1.39", 358, "190.0.2.8"},
        {7, "190.3.0.7", 294,  "190.3.1.40", 358, "190.0.2.8"},
        {1, "190.3.0.1", 295,  "190.3.1.41", 358, "190.0.2.8"},
        {2, "190.3.0.2", 296,  "190.3.1.42", 358, "190.0.2.8"},
        {3, "190.3.0.3", 297,  "190.3.1.43", 358, "190.0.2.8"},
        {4, "190.3.0.4", 298,  "190.3.1.44", 358, "190.0.2.8"},
        {5, "190.3.0.5", 299,  "190.3.1.45", 358, "190.0.2.8"},
        {6, "190.3.0.6", 300,  "190.3.1.46", 358, "190.0.2.8"},
        {7, "190.3.0.7", 301,  "190.3.1.47", 358, "190.0.2.8"},
        {1, "190.3.0.1", 302,  "190.3.1.48", 358, "190.0.2.8"},
        {2, "190.3.0.2", 303,  "190.3.1.49", 358, "190.0.2.8"},
        {3, "190.3.0.3", 304,  "190.3.1.50", 358, "190.0.2.8"},
        {4, "190.3.0.4", 305,  "190.3.1.51", 358, "190.0.2.8"},
        {5, "190.3.0.5", 306,  "190.3.1.52", 358, "190.0.2.8"},
        {6, "190.3.0.6", 307,  "190.3.1.53", 358, "190.0.2.8"},
        {7, "190.3.0.7", 308,  "190.3.1.54", 358, "190.0.2.8"},
        {1, "190.3.0.1", 309,  "190.3.1.55", 358, "190.0.2.8"},
        {2, "190.3.0.2", 310,  "190.3.1.56", 358, "190.0.2.8"},
        {3, "190.3.0.3", 311,  "190.3.1.57", 358, "190.0.2.8"},
        {4, "190.3.0.4", 312,  "190.3.1.58", 358, "190.0.2.8"},
        {5, "190.3.0.5", 313,  "190.3.1.59", 358, "190.0.2.8"},
        {6, "190.3.0.6", 314,  "190.3.1.60", 358, "190.0.2.8"},
        {7, "190.3.0.7", 315,  "190.3.1.61", 358, "190.0.2.8"},
        {1, "190.3.0.1", 316,  "190.3.1.62", 358, "190.0.2.8"},
        {2, "190.3.0.2", 317,  "190.3.1.63", 358, "190.0.2.8"},
        {3, "190.3.0.3", 318,  "190.3.1.64", 358, "190.0.2.8"},
        {4, "190.3.0.4", 319,  "190.3.1.65", 358, "190.0.2.8"},
        {5, "190.3.0.5", 320,  "190.3.1.66", 358, "190.0.2.8"},
        {6, "190.3.0.6", 321,  "190.3.1.67", 358, "190.0.2.8"},
        {7, "190.3.0.7", 322,  "190.3.1.68", 358, "190.0.2.8"},
        {1, "190.3.0.1", 323,  "190.3.1.69", 358, "190.0.2.8"},
        {2, "190.3.0.2", 324,  "190.3.1.70", 358, "190.0.2.8"},
        {3, "190.3.0.3", 325,  "190.3.1.71", 358, "190.0.2.8"},
        {4, "190.3.0.4", 326,  "190.3.1.72", 358, "190.0.2.8"},
        {5, "190.3.0.5", 327,  "190.3.1.73", 358, "190.0.2.8"},
        {6, "190.3.0.6", 328,  "190.3.1.74", 358, "190.0.2.8"},
        {7, "190.3.0.7", 329,  "190.3.1.75", 358, "190.0.2.8"},
        {1, "190.3.0.1", 330,  "190.3.1.76", 358, "190.0.2.8"},
        {2, "190.3.0.2", 331,  "190.3.1.77", 358, "190.0.2.8"},
        {3, "190.3.0.3", 332,  "190.3.1.78", 358, "190.0.2.8"},
        {4, "190.3.0.4", 333,  "190.3.1.79", 358, "190.0.2.8"},
        {5, "190.3.0.5", 334,  "190.3.1.80", 358, "190.0.2.8"},
        {6, "190.3.0.6", 335,  "190.3.1.81", 358, "190.0.2.8"},
        {7, "190.3.0.7", 336,  "190.3.1.82", 358, "190.0.2.8"},
        {1, "190.3.0.1", 337,  "190.3.1.83", 358, "190.0.2.8"},
        {2, "190.3.0.2", 338,  "190.3.1.84", 358, "190.0.2.8"},
        {3, "190.3.0.3", 339,  "190.3.1.85", 358, "190.0.2.8"},
        {4, "190.3.0.4", 340,  "190.3.1.86", 358, "190.0.2.8"},
        {5, "190.3.0.5", 341,  "190.3.1.87", 358, "190.0.2.8"},
        {6, "190.3.0.6", 342,  "190.3.1.88", 358, "190.0.2.8"},
        {7, "190.3.0.7", 343,  "190.3.1.89", 358, "190.0.2.8"},
        {1, "190.3.0.1", 344,  "190.3.1.90", 358, "190.0.2.8"},
        {2, "190.3.0.2", 345,  "190.3.1.91", 358, "190.0.2.8"},
        {3, "190.3.0.3", 346,  "190.3.1.92", 358, "190.0.2.8"},
        {4, "190.3.0.4", 347,  "190.3.1.93", 358, "190.0.2.8"},
        {5, "190.3.0.5", 348,  "190.3.1.94", 358, "190.0.2.8"},
        {6, "190.3.0.6", 349,  "190.3.1.95", 358, "190.0.2.8"},
        {7, "190.3.0.7", 350,  "190.3.1.96", 358, "190.0.2.8"},
        {1, "190.3.0.1", 351,  "190.3.1.97", 358, "190.0.2.8"},
        {2, "190.3.0.2", 352,  "190.3.1.98", 358, "190.0.2.8"},
        {3, "190.3.0.3", 353,  "190.3.1.99", 358, "190.0.2.8"},
        {4, "190.3.0.4", 354,  "190.3.1.100", 358, "190.0.2.8"},
        {5, "190.3.0.5", 355,  "190.3.1.101", 358, "190.0.2.8"},
        {6, "190.3.0.6", 356,  "190.3.1.102", 358, "190.0.2.8"},
        {7, "190.3.0.7", 357,  "190.3.1.103", 358, "190.0.2.8"}
};

#define NUM_VALIDATION_PATTENRS 6

static const
ValidationPatternProfile validationPatternProfile[NUM_VALIDATION_PATTENRS] =
{
        {1, 1,  1,   "001001", &connectionMap_001001[0]},
        {1, 10, 10,  "001010", &connectionMap_001010[0]},
        {1, 50, 50,  "001050", &connectionMap_001050[0]},
        {7, 1,  7,   "007001", &connectionMap_007001[0]},
        {7, 10, 70,  "007010", &connectionMap_007010[0]},
        {7, 50, 350, "007050", &connectionMap_007050[0]}
};

#endif
#endif

/**
 * @ingroup LteCommon
 * @brief Lte Logging Class.
 *
 * Log format:
 *
 *  -# Simlation time.
 *  -# Node ID
 *  -# Interface (or other instance) index.
 *  -# Log level.
 *  -# Layer name. (Layer, Sublayer or module name)
 *  -# Log message body.
 *  -# File path (optional)
 *  -# Line No.(optional)
 * <br>
 * Log Level
 *  - 1:WARN
 *  - 2:INFO
 *  - 3:DEBUG
 *  - 4:more detail DEBUG
 */
class LteLog
{
public:

    static const int MAX_FILE_NAME_LENGTH = 256;

    enum {
        MAX_LOG_LENGTH = 4096,      ///< Maximum log string length in byte.
        MAX_LINES_DEFAULT = 600000  ///< Default number of lines per a file.
    };

    /**
     * @brief Log level.
     */
    typedef enum {
        FATAL = 0,  ///< Fatal error.
        WARN,       ///< Warning.
        INFO,       ///< Just information.
        LOG_LEVEL_DEBUG,      ///< Debug print.
        LOG_LEVEL_DEBUG2      ///< More detail debug print.
    } LogLevelType;

public:
    /// Default Constructor.
    LteLog();

    /// Copy constructor
    LteLog(const LteLog& other);

    /// Destructor.
    virtual ~LteLog();

    // Is enable log output.
    static bool IsEnableWarn();
    static bool IsEnableInfo();
    static bool IsEnableDebug();
    static bool IsEnableDebug2();

    /// Write fatal error.
    static void Fatal( Node* node, int index,
                       const char* layerName, const char* file,
                       int line, const char* log );
    /// Write fatal error using printf format.
    static void FatalFormat( Node *node, int index,
                             const char* layerName, const char* file,
                             int line, const char *logfmt, ... );

    /// Write warning.
    static void Warn( Node* node, int index,
                      const char* layerName, const char* log );
    /// Write fatal error using printf format.
    static void WarnFormat( Node *node, int index,
                            const char* layerName, const char *logfmt, ... );

    /// Write a information log.
    static void Info( Node* node, int index,
                      const char* layerName, const char* log );
    /// Write a information log using printf format.
    static void InfoFormat( Node *node, int index,
                            const char* layerName, const char *logfmt, ... );

    /// Write a debug log.
    static void Debug( Node* node, int index,
                       const char* layerName, const char* log );
    /// Write a debug log using printf format.
    static void DebugFormat( Node *node, int index,
                             const char* layerName, const char *logfmt, ... );
    /// Write a debug log with file and line.
    static void DebugWithFileLine( Node* node, int index,
                                   const char* layerName, const char* file,
                                   int line, const char* log );
    /// Write a debug log using printf format with file and line.
    static void DebugWithFileLineFormat( Node *node, int index,
                                         const char* layerName, const char* file,
                                         int line, const char *logfmt, ... );

    /// Write a more detail debug log.
    static void Debug2( Node* node, int index,
                        const char* layerName, const char* log );
    /// Write a more detail debug log using printf format.
    static void Debug2Format( Node *node, int index,
                              const char* layerName, const char *logfmt, ... );
    /// Write a more detail debug log with file and line.
    static void Debug2WithFileLine( Node* node, int index,
                                    const char* layerName, const char* file,
                                    int line, const char* log );
    /// Write a more detail debug log using printf format with file and line.
    static void Debug2WithFileLineFormat( Node *node, int index,
                                          const char* layerName, const char* file,
                                          int line, const char *logfmt, ... );

private:
    /// Write log record.
    void Write( Node *node, int index, LogLevelType level,
                const char* layerName, const char* log );
    /// Write log record.
    void Write( Node *node, int index, LogLevelType level,
                const char* layerName, const char* file,
                int line, const char* log );
    /// Write log record using printf format.
    void Write( Node *node, int index, LogLevelType level,
                const char* layerName, const char *logfmt, va_list& args );
    /// Write log record using printf format.
    void Write( Node *node, int index, LogLevelType level,
                const char* layerName, const char* file,
                int line, const char *logfmt, va_list& args );

    /// Format Record body.
    char* FormatRecordBody( char* buf, int& bufsz, const char* body );
    /// Format Record body.
    char* FormatRecordBody( char* buf, int& bufsz,
                                      const char* bodyfmt, va_list& args );
    /// Format Record header.
    char* FormatRecordHeader(char* buf, int& bufsz, Node* node, int index,
                                LogLevelType level, const char* layerName);
    /// Format FILE and LINE.
    char* FormatFileLine( char* buf, int& bufsz,
                          const char* file, int line );
    /// Write log record.
    void Write( const char* log );

    // Open a new file
    void OpenNewFile();

#if ENABLE_FILTERING

    // Filter layer
    bool FilterLayer(const char* layerName);
   
    // Filter time
    bool FilterTime(clocktype t);

    // Filter nodeId
    bool FilterNode(int nodeId);

#endif

public:
#ifdef LTE_LIB_LOG
#ifdef LTE_LIB_VALIDATION_LOG
    static double getValidationStatOffset();

    static bool validationPatternEnabled();

    static const BaseConnectionInfo* getConnectionInfo(int* len);

    static bool getConnectionInfoConnectingWithMe(
            int myNodeId,
            bool isEnb,
            std::vector<ConnectionInfo>& connectionInfos);
#endif
#endif

private:
    char            fname[MAX_FILE_NAME_LENGTH];
    int             fileNo;
    int             lineNo;
    int             linePerFile;
    bool            isStdout;   // if LTE_LOG_STDOUT=YES,
                                // output logs to stdout.
    bool            isFlush;    // if LTE_LOG_FLUSH=TES,
                                // flush buffer every record.
    FILE*           fp;         // ile pointer.
    LogLevelType    outLevel;   // Output level.
    ThreadMutex     mutex;      // Multi-threading mutual exclusion.

#if ENABLE_FILTERING

    bool            layerFilterEnabled;
    char            layerMask[MAX_FILE_NAME_LENGTH];

    bool            timeFilterEnabled;
    double          outputStartTime;
    double          outputEndTime;

    bool            nodeFilterEnabled;
    std::set<int>   outputNodes;

#endif

#ifdef LTE_LIB_LOG
#ifdef LTE_LIB_VALIDATION_LOG
    double validationStatOffset;
    int validationPatternId;

#endif
#endif
};

class PdfCalculator
{
public:
    std::vector<int> data;

    double _minValue;
    double _maxValue;
    int _numDivision;

    PdfCalculator()
    {
        _minValue = 0.0;
        _maxValue = 0.0;
        _numDivision = 0;
    }

    PdfCalculator(
        double minValue,
        double maxValue,
        int numDivision)
    {
        data.resize(numDivision+2, 0);

        _minValue = minValue;
        _maxValue = maxValue;
        _numDivision = numDivision;
    }

    void regist(double val)
    {
        double step =
            ( _maxValue - _minValue ) / (double)_numDivision;

        int raw_index = 
            (int)floor( ( val - _minValue ) / step );

        raw_index = MAX( raw_index, -1 );
        raw_index = MIN( raw_index, _numDivision );

        int index = raw_index + 1;

        ++data[index];
    }

    std::string toString()
    {
        int sum = 0;

        std::stringstream ss;
        for (size_t i = 0; i < data.size(); ++i)
        {
            sum += data[i];
        }

        ss << "min=," << _minValue << ","
           << "max=," << _maxValue << ","
           << "div=," << _numDivision << ","
           << "samples=," << sum << ","
           << "pdf=,";

        for (size_t i = 0; i < data.size(); ++i)
        {
            ss << (double)data[i]/(double)sum << ",";
        }

        return ss.str();
    }
};

class Aggregator
{
public:
    enum ValueType
    {
        TB_SINR = 0,
        DL_ESTIMATED_TB_SINR,
        UL_ESTIMATED_TB_SINR,
        CQI_TB_SINR,
        CQI,
        DL_MCS,
        UL_MCS,
        PPER,
        VALUE_TYPE_NUM
    };

    struct ValueTypeProfile
    {
        double _minValue;
        double _maxVale;
        int _numDivision;
    };

public:

    std::vector< std::map<LteRnti, PdfCalculator> > container;
    
    Aggregator()
    {
        container.resize(VALUE_TYPE_NUM);
    }
    ~Aggregator(){}

    bool hasKey(const LteRnti& rnti, ValueType valueType)
    {
        return (container[valueType].find(rnti) !=
                                                container[valueType].end());
    }

    std::vector<LteRnti> getKeys(ValueType valueType)
    {
        std::vector<LteRnti> keys;

        std::map<LteRnti, PdfCalculator>::iterator it;
        for (it = container[valueType].begin();
            it != container[valueType].end();
            ++it)
        {
            keys.push_back(it->first);
        }

        return keys;
    }

    void regist(const LteRnti& rnti, ValueType valueType, double val)
    {
        if (! hasKey(rnti, valueType) )
        {
            ValueTypeProfile profile[] = {
                { -20.0, 50.0, 280 }, // TB_SINR
                { -20.0, 50.0, 280 }, // DL_ESTIMATED_TB_SINR
                { -20.0, 50.0, 280 }, // UL_ESTIMATED_TB_SINR
                { -20.0, 50.0, 280 }, // CQI_TB_SINR
                {  -0.5, 15.5, 16  }, // CQI
                {  -0.5, 31.5, 32  }, // DL_MCS
                {  -0.5, 31.5, 32  }, // UL_MCS
                { -10.0,  0.0, 200 }  // PPER(log order)
            };

            PdfCalculator pc(
                profile[valueType]._minValue,
                profile[valueType]._maxVale,
                profile[valueType]._numDivision);
            
            container[valueType][rnti] = pc;
        }

        container[valueType][rnti].regist(val);
    }

    std::string toString(const LteRnti& rnti, ValueType valueType)
    {
        if (hasKey(rnti, valueType) )
        {
            return container[valueType][rnti].toString();
        }else
        {
            return std::string("");
        }
    }
};

#ifdef LTE_LIB_LOG
#ifdef LTE_LIB_VALIDATION_LOG
struct LogLteAverager
{
    double _sum;
    int _cnt;

    LogLteAverager()
    {
        _sum = 0.0;
        _cnt = 0;
    }

    void regist(double val)
    {
        ++_cnt;
        _sum += val;
    }

    double get()
    {
        if (_cnt == 0 )
        {
            return 0.0;
        }else
        {
            return _sum / _cnt;
        }
    }

    double getSum()
    {
        return _sum;
    }

    int getCount()
    {
        return _cnt;
    }
};
#endif
#endif


} // namespace lte

#endif // __LOG_LTE_H__
